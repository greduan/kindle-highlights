#!/usr/bin/env node

'use strict';

const getStdin = require('get-stdin');
const sqlite = require('sqlite');
const path = require('path');
const SQL = require('sql-template-strings');
const pSettle = require('p-settle');

const generateDatabaseRecords = highlights => {
  const inserted_at = new Date().toISOString();
  const book_title = highlights.bookTitle;
  return highlights.highlights.map(highlight => ({
    book_title,
    highlight: highlight.text,
    location: highlight.location,
    inserted_at,
  }));
};

(async () => {
  const db = await sqlite.open(path.resolve(process.cwd(), 'database.sqlite'), { Promise });
  await db.migrate({ force: process.argv[2] === '--nuke' ? 'last' : false });

  const input = JSON.parse(await getStdin());

  const results = await pSettle(
    generateDatabaseRecords(input)
      .map(a => db.all(
        SQL`
          INSERT
          INTO highlights
          (book_title, highlight, location, inserted_at)
          VALUES (${a.book_title}, ${a.highlight}, ${a.location}, ${a.inserted_at})
        `)
      )
  );

  results.forEach(({ isRejected, reason }) => {
    if (
      isRejected &&
      reason.message !== 'SQLITE_CONSTRAINT: UNIQUE constraint failed: highlights.highlight'
    ) {
      console.error(reason.message);
    }
  });
})();
